==816474== Memcheck, a memory error detector
==816474== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==816474== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==816474== Command: ./mysh
==816474== Parent PID: 802103
==816474== 
==816474== Invalid read of size 1
==816474==    at 0x484ED16: strlen (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==816474==    by 0x491D602: strdup (strdup.c:41)
==816474==    by 0x10C4D9: mem_get_value_at_index (shellmemory.c:130)
==816474==    by 0x10D2F7: get_instruction_with_page_table (scheduler.c:80)
==816474==    by 0x10D4FB: rr (scheduler.c:163)
==816474==    by 0x10D799: startScheduler (scheduler.c:246)
==816474==    by 0x10B6FF: run (interpreter.c:340)
==816474==    by 0x10B07B: interpreter (interpreter.c:147)
==816474==    by 0x10ABC5: parseInput (shell.c:129)
==816474==    by 0x10A8F3: main (shell.c:66)
==816474==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==816474== 
==816474== 
==816474== Process terminating with default action of signal 11 (SIGSEGV)
==816474==  Access not within mapped region at address 0x0
==816474==    at 0x484ED16: strlen (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==816474==    by 0x491D602: strdup (strdup.c:41)
==816474==    by 0x10C4D9: mem_get_value_at_index (shellmemory.c:130)
==816474==    by 0x10D2F7: get_instruction_with_page_table (scheduler.c:80)
==816474==    by 0x10D4FB: rr (scheduler.c:163)
==816474==    by 0x10D799: startScheduler (scheduler.c:246)
==816474==    by 0x10B6FF: run (interpreter.c:340)
==816474==    by 0x10B07B: interpreter (interpreter.c:147)
==816474==    by 0x10ABC5: parseInput (shell.c:129)
==816474==    by 0x10A8F3: main (shell.c:66)
==816474==  If you believe this happened as a result of a stack
==816474==  overflow in your program's main thread (unlikely but
==816474==  possible), you can try to increase the size of the
==816474==  main thread stack using the --main-stacksize= flag.
==816474==  The main thread stack size used in this run was 8388608.
==816474== 
==816474== HEAP SUMMARY:
==816474==     in use at exit: 3,563 bytes in 39 blocks
==816474==   total heap usage: 50 allocs, 11 frees, 21,530 bytes allocated
==816474== 
==816474== 60 bytes in 12 blocks are definitely lost in loss record 3 of 11
==816474==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==816474==    by 0x491D60E: strdup (strdup.c:42)
==816474==    by 0x10AAF4: parseInput (shell.c:120)
==816474==    by 0x10D50A: rr (scheduler.c:165)
==816474==    by 0x10D799: startScheduler (scheduler.c:246)
==816474==    by 0x10B6FF: run (interpreter.c:340)
==816474==    by 0x10B07B: interpreter (interpreter.c:147)
==816474==    by 0x10ABC5: parseInput (shell.c:129)
==816474==    by 0x10A8F3: main (shell.c:66)
==816474== 
==816474== 66 bytes in 6 blocks are definitely lost in loss record 5 of 11
==816474==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==816474==    by 0x491D60E: strdup (strdup.c:42)
==816474==    by 0x10C4D9: mem_get_value_at_index (shellmemory.c:130)
==816474==    by 0x10D2F7: get_instruction_with_page_table (scheduler.c:80)
==816474==    by 0x10D4FB: rr (scheduler.c:163)
==816474==    by 0x10D799: startScheduler (scheduler.c:246)
==816474==    by 0x10B6FF: run (interpreter.c:340)
==816474==    by 0x10B07B: interpreter (interpreter.c:147)
==816474==    by 0x10ABC5: parseInput (shell.c:129)
==816474==    by 0x10A8F3: main (shell.c:66)
==816474== 
==816474== 544 bytes in 2 blocks are possibly lost in loss record 9 of 11
==816474==    at 0x484DA83: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==816474==    by 0x40147D9: calloc (rtld-malloc.h:44)
==816474==    by 0x40147D9: allocate_dtv (dl-tls.c:375)
==816474==    by 0x40147D9: _dl_allocate_tls (dl-tls.c:634)
==816474==    by 0x490A834: allocate_stack (allocatestack.c:430)
==816474==    by 0x490A834: pthread_create@@GLIBC_2.34 (pthread_create.c:647)
==816474==    by 0x10D9AC: init_thread_pool (scheduler.c:315)
==816474==    by 0x10A729: main (shell.c:35)
==816474== 
==816474== LEAK SUMMARY:
==816474==    definitely lost: 126 bytes in 18 blocks
==816474==    indirectly lost: 0 bytes in 0 blocks
==816474==      possibly lost: 544 bytes in 2 blocks
==816474==    still reachable: 2,893 bytes in 19 blocks
==816474==         suppressed: 0 bytes in 0 blocks
==816474== Reachable blocks (those to which a pointer was found) are not shown.
==816474== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==816474== 
==816474== For lists of detected and suppressed errors, rerun with: -s
==816474== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
